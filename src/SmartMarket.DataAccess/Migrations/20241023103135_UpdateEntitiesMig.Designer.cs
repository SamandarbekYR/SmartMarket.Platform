// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMarket.DataAccess.Data;

#nullable disable

namespace SmartMarket.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241023103135_UpdateEntitiesMig")]
    partial class UpdateEntitiesMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMarket.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adress");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_Number2");

                    b.HasKey("Id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Expenses.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PayDeskId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_desk_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("TypeOfPayment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_of_payment");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("PayDeskId");

                    b.HasIndex("WorkerId");

                    b.ToTable("expense");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_number");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WorkerId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Partners.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("LastPayment")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<double>("TotalDebt")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt");

                    b.HasKey("Id");

                    b.ToTable("partner");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FirstName");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("contr_agent");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.ContrAgentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContrAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("contr_agent_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("LastPayment")
                        .HasColumnType("double precision")
                        .HasColumnName("total_payment");

                    b.Property<DateTime>("LastPaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment_date");

                    b.Property<double>("TotalDebt")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt");

                    b.HasKey("Id");

                    b.HasIndex("ContrAgentId");

                    b.ToTable("contr_agent_payment");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.PartnerCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("partners_company");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PayDesks.PayDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Income")
                        .HasColumnType("double precision")
                        .HasColumnName("income");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Outlay")
                        .HasColumnType("double precision")
                        .HasColumnName("outlay");

                    b.HasKey("Id");

                    b.ToTable("pay_desk");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.DebtPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("DebtSum")
                        .HasColumnType("double precision")
                        .HasColumnName("debt_sum");

                    b.Property<Guid>("DebtorId")
                        .HasColumnType("uuid")
                        .HasColumnName("debtor_id");

                    b.Property<double>("PayedSum")
                        .HasColumnType("double precision")
                        .HasColumnName("payed_sum");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<double>("RemainingSum")
                        .HasColumnType("double precision")
                        .HasColumnName("remaining_sum");

                    b.HasKey("Id");

                    b.HasIndex("DebtorId");

                    b.ToTable("debt_payment");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Debtors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("DeptSum")
                        .HasColumnType("double precision")
                        .HasColumnName("debt_sum");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.ToTable("debtors");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.InvalidProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductSaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_sale_id");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("return_reason");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductSaleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("invalid_product");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.LoadReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContrAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("contragent_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("total_price");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("ContrAgentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WorkerId");

                    b.ToTable("load_report");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("ContrAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("contragent_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NoteAmount")
                        .HasColumnType("integer")
                        .HasColumnName("note_amount");

                    b.Property<string>("PCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pcode");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("SellPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("sell_price");

                    b.Property<int>("SellPricePersentage")
                        .HasColumnType("integer")
                        .HasColumnName("sell_price_persentage");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unit_of_measure");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContrAgentId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("Barcode", "PCode", "Name")
                        .IsUnique();

                    b.ToTable("product");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_image");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ProductSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<double>("ItemTotalCost")
                        .HasColumnType("double precision")
                        .HasColumnName("item_total_cost");

                    b.Property<Guid?>("PayDeskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("SalesRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_request_id");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PayDeskId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesRequestId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("WorkerId");

                    b.ToTable("product_sale");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ReplaceProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductSaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_sale_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductSaleId");

                    b.HasIndex("WorkerId");

                    b.ToTable("replace_product");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.SalesRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("CardSum")
                        .HasColumnType("double precision")
                        .HasColumnName("card_sum");

                    b.Property<double>("CashSum")
                        .HasColumnType("double precision")
                        .HasColumnName("cash_sum");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("DebtSum")
                        .HasColumnType("double precision")
                        .HasColumnName("debt_sum");

                    b.Property<Guid>("PayDeskId")
                        .HasColumnType("uuid")
                        .HasColumnName("pay_desk_id");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double precision")
                        .HasColumnName("total_cost");

                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TransactionId"));

                    b.Property<double>("TransferMoney")
                        .HasColumnType("double precision")
                        .HasColumnName("transfer_money");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("PayDeskId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("WorkerId");

                    b.ToTable("sales_request");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.Property<string>("TypeOfPayment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_of_payment");

                    b.HasKey("Id");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("position");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Advance")
                        .HasColumnType("double precision")
                        .HasColumnName("advance");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("salary");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.SalaryCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AdvanceCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("advance_check");

                    b.Property<double>("CompanyDebt")
                        .HasColumnType("double precision")
                        .HasColumnName("company_debt");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Salarycheck")
                        .HasColumnType("boolean")
                        .HasColumnName("salary_check");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("salary_check");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.SalaryWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SalaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("salary_id");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("SalaryId");

                    b.HasIndex("WorkerId");

                    b.ToTable("salary_worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Advance")
                        .HasColumnType("double precision")
                        .HasColumnName("advance");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("img_path");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision")
                        .HasColumnName("salary");

                    b.Property<Guid>("WorkerRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_roleid");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("WorkerRoleId");

                    b.ToTable("worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.WorkerDebt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uuid")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("worker_debt");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.WorkerRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("worker_role");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Expenses.Expense", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PayDesks.PayDesk", "PayDesk")
                        .WithMany("Expenses")
                        .HasForeignKey("PayDeskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("Expenses")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PayDesk");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Products.Product", "Product")
                        .WithMany("Order")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("Orders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PartnersCompany.PartnerCompany", "PartnerCompany")
                        .WithMany("ContrAgents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartnerCompany");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.ContrAgentPayment", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", "ContrAgent")
                        .WithMany("ContrAgentPayment")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContrAgent");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.DebtPayment", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Products.Debtors", "Debtor")
                        .WithMany("DebtPayment")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Debtor");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Debtors", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Partners.Partner", "Partner")
                        .WithMany("Debtors")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Products.Product", "Product")
                        .WithMany("Debtors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.InvalidProduct", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Products.ProductSale", "ProductSale")
                        .WithMany("InvalidProducts")
                        .HasForeignKey("ProductSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("InvalidProducts")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductSale");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.LoadReport", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", "ContrAgent")
                        .WithMany("LoadReports")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Products.Product", "Product")
                        .WithMany("LoadReport")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("LoadReports")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContrAgent");

                    b.Navigation("Product");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", "ContrAgent")
                        .WithMany("Products")
                        .HasForeignKey("ContrAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("Products")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ContrAgent");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ProductImage", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ProductSale", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PayDesks.PayDesk", null)
                        .WithMany("ProductSales")
                        .HasForeignKey("PayDeskId");

                    b.HasOne("SmartMarket.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductSale")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Products.SalesRequest", "SalesRequest")
                        .WithMany("ProductSaleItems")
                        .HasForeignKey("SalesRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Transactions.Transaction", null)
                        .WithMany("ProductSales")
                        .HasForeignKey("TransactionId");

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", null)
                        .WithMany("ProductSales")
                        .HasForeignKey("WorkerId");

                    b.Navigation("Product");

                    b.Navigation("SalesRequest");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ReplaceProduct", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Products.ProductSale", "ProductSale")
                        .WithMany("ReplaceProducts")
                        .HasForeignKey("ProductSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("ReplaceProducts")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductSale");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.SalesRequest", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.PayDesks.PayDesk", "PayDesk")
                        .WithMany()
                        .HasForeignKey("PayDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayDesk");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.SalaryCheck", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("SalaryChecks")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.SalaryWorker", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Workers.Salary", "Salary")
                        .WithMany("SalaryWorkers")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("SalaryWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salary");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Worker", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Workers.Position", "Position")
                        .WithMany("Workers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMarket.Domain.Entities.Workers.WorkerRole", "WorkerRole")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("WorkerRole");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.WorkerDebt", b =>
                {
                    b.HasOne("SmartMarket.Domain.Entities.Workers.Worker", "Worker")
                        .WithMany("WorkerDebts")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Partners.Partner", b =>
                {
                    b.Navigation("Debtors");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.ContrAgent", b =>
                {
                    b.Navigation("ContrAgentPayment");

                    b.Navigation("LoadReports");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PartnersCompany.PartnerCompany", b =>
                {
                    b.Navigation("ContrAgents");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.PayDesks.PayDesk", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Debtors", b =>
                {
                    b.Navigation("DebtPayment");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Debtors");

                    b.Navigation("LoadReport");

                    b.Navigation("Order");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductSale");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.ProductSale", b =>
                {
                    b.Navigation("InvalidProducts");

                    b.Navigation("ReplaceProducts");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Products.SalesRequest", b =>
                {
                    b.Navigation("ProductSaleItems");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Position", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Salary", b =>
                {
                    b.Navigation("SalaryWorkers");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.Worker", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("InvalidProducts");

                    b.Navigation("LoadReports");

                    b.Navigation("Orders");

                    b.Navigation("ProductSales");

                    b.Navigation("Products");

                    b.Navigation("ReplaceProducts");

                    b.Navigation("SalaryChecks");

                    b.Navigation("SalaryWorkers");

                    b.Navigation("WorkerDebts");
                });

            modelBuilder.Entity("SmartMarket.Domain.Entities.Workers.WorkerRole", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
